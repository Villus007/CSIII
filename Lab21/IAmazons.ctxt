#BlueJ class context
comment0.target=IAmazons
comment1.params=
comment1.target=Amazons\ copy()
comment1.text=\r\n\tReturn\ a\ new\ instance\ of\ an\ Amazons\ object\ with\ the\ same\ state\ as\ *this*\ object\r\n\tThe\ copy\ should\ contain\ all\ the\ same\ Pieces\ in\ all\ the\ same\ places\ and\ the\ same\ currentPlayer\r\n
comment10.params=from\ to
comment10.target=java.util.List\ getPath(Point,\ Point)
comment10.text=\r\n\tReturn\ a\ List\ of\ Points\ that\ form\ a\ straigh\ line\ between\ Point\ from\ and\ Point\ to\r\n\tThis\ line\ can\ be\ horizontal,\ vertical,\ or\ diagonal\r\n\tIf\ there\ is\ no\ straight\ line\ between\ from\ and\ to,\ return\ an\ empty\ List\r\n
comment11.params=path
comment11.target=boolean\ isPathEmpty(java.util.List)
comment11.text=\r\n\tReturn\ true\ is\ all\ of\ the\ Points\ on\ path\ are\ empty\r\n\tReturn\ false\ if\ path\ is\ the\ empty\ List\r\n
comment12.params=piece
comment12.target=java.util.List\ getPieces(Piece)
comment12.text=\r\n\tReturn\ a\ List\ of\ the\ Points\ that\ contain\ pieces\ that\ match\ the\ specified\ piece\ (Piece.BLACK,\ Piece.WHITE)\r\n
comment13.params=from
comment13.target=java.util.List\ getLegalMoves(Point)
comment13.text=\r\n\tReturn\ a\ List\ of\ Moves\ that\ are\ legal\ for\ the\ point\ located\ at\ Point\ from\r\n\tReturn\ the\ empty\ List\ if\ there\ is\ no\ piece\ at\ Point\ from\ or\ if\ the\ Piece\ is\ an\ arrow\r\n\tDo\ not\ worry\ about\ the\ currentPlayer.\r\n
comment14.params=piece
comment14.target=java.util.List\ getLegalMoves(Piece)
comment14.text=\r\n\tReturn\ a\ List\ of\ Moves\ that\ are\ legal\ for\ pieces\ that\ match\ the\ specified\ piece\ (Piece.BLACK,\ Piece.WHITE)\r\n\tDo\ not\ worry\ about\ the\ currentPlayer\r\n\tReturn\ the\ empty\ List\ if\ piece\ is\ an\ arrow\r\n
comment15.params=move
comment15.target=boolean\ isLegalMove(Move)
comment15.text=\r\n\tReturn\ true\ if\ the\ specified\ Move\ is\ a\ legal\ move\r\n\tDo\ not\ worry\ about\ the\ currentPlayer\r\n
comment16.params=piecePosition
comment16.target=boolean\ hasMoves(Point)
comment16.text=\r\n\tReturn\ true\ if\ the\ piece\ at\ the\ specified\ Point\ has\ any\ legal\ moves\r\n\tReturn\ false\ if\ there\ is\ no\ piece\ at\ the\ specified\ Point,\ or\ if\ that\ piece\ is\ an\ arrow\r\n\tDo\ not\ worry\ about\ the\ currentPlayer\r\n
comment17.params=
comment17.target=Piece\ getWinner()
comment17.text=\r\n\tIf\ the\ game\ is\ over,\ return\ the\ piece\ that\ is\ the\ winner\r\n\tThe\ winner\ is\ the\ piece\ that\ still\ has\ legal\ moves\ left\r\n\tIf\ neither\ piece\ has\ any\ legal\ moves,\ return\ null\r\n\tIf\ the\ game\ is\ not\ over,\ return\ null\r\n
comment18.params=
comment18.target=boolean\ isGameOver()
comment18.text=\r\n\tReturn\ true\ if\ at\ least\ one\ of\ the\ pieces\ (Piece.BLACK,\ Piece.WHITE)\ has\ 0\ legal\ moves\ left\r\n
comment2.params=
comment2.target=Piece\ getCurrentPlayer()
comment2.text=\r\n\tReturn\ the\ current\ turn\ holder's\ Piece,\ Piece.BLACK\ or\ Piece.WHITE\r\n
comment3.params=piece
comment3.target=void\ setCurrentPlayer(Piece)
comment3.text=\r\n\tChange\ the\ current\ player\ to\ the\ specified\ piece\r\n
comment4.params=
comment4.target=void\ nextPlayer()
comment4.text=\r\n\tChange\ the\ currentPlayer\r\n\t\tPiece.BLACK\ ->\ Piece.WHITE\r\n\t\tPiece.WHITE\ ->\ Piece.BLACK\r\n
comment5.params=p
comment5.target=Piece\ getPiece(Point)
comment5.text=\r\n\tReturn\ the\ piece\ that\ is\ on\ the\ board\ at\ the\ specified\ Point\r\n\t\tPiece.BLACK,\ Piece.WHITE,\ or\ Piece.ARROW\r\n
comment6.params=piece\ p
comment6.target=void\ setPiece(Piece,\ Point)
comment6.text=\r\n\ \ Add\ the\ specified\ piece\ to\ the\ board\ at\ the\ specified\ Point\r\n
comment7.params=from\ to
comment7.target=void\ move(Point,\ Point)
comment7.text=\r\n\tMove\ the\ piece\ located\ at\ Point\ from\ to\ Point\ to\r\n
comment8.params=p
comment8.target=void\ arrow(Point)
comment8.text=\r\n\tAdd\ an\ arrow\ to\ Point\ p\r\n
comment9.params=p
comment9.target=boolean\ isEmpty(Point)
comment9.text=\r\n\tReturn\ true\ is\ there\ is\ no\ piece\ at\ Point\ p\r\n
numComments=19
